It may seem strange to talk about tests in the context of debugging,
but in reality they're one of the most useful debugging tools you have.
The process of reducing a situation down to something simple enough to
fit in a test case teaches you a lot about the problems your program
is seeing, and once the test is finished (and the underlying bugs are
fixed), you can add it to your test suite as a guard against future
regressions. Also, once you've reduced the issue down to its simplest
manifestation, you've got a jumping-off point to use with a debugger
(about which more will be said later).

Testing is far too huge a topic to attempt to cover in depth here. James
Coglan's "JavaScript Testing Recipes" is an entire (excellent) book
devoted to testing in JavaScript. Similarly, there are even more test
runners than test frameworks for Node, and there's no reasonable way to
single one out as being better than all the others. However, there are
a few things to look for in a test framework when you're using it as a
debugging tool:

  * You should be able to run your test cases directly from the command
    line, without the use of a special-purpose binary. Stepping through
    a bunch of code that has nothing to do with your problem each time
    you run the test is a drag.
  * The test framework can't do anything fancy with events,
    error-handling, or otherwise monkeypatch the runtime. The more
    clever moving parts there are in the test framework, the more likely
    they are to interfere with your application in a way that makes it
    tough to figure out what's wrong with your program.

A good, simple framework that has both these properties (among many
others) is tape. tape produces TAP output, its test suites can be run
directly with node, and it comes with a rich set of assertions -- and
very little else.
