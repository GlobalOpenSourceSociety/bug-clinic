If you've been around Node for a while, you're probably wondering when
this tutorial would get around to discussing DTrace, the dynamic tracing
system. DTrace and Node's history are intertwined, because both are
developed and supported by Joyent. DTrace is perhaps the most powerful,
most general tracing tool ever developed. Its killer feature is that it
allows you to instrument and observe the internals of Node processes
without you, as a developer, making any changes to your own code.

However, DTrace has a major disadvantage: several of its most useful
features are only available on SmartOS, Joyent's cloud operating system
(or, for the few proud souls still running it, recent versions of
FreeBSD). DTrace is not the only dynamic tracing system out there, and
Node actually has support for several different tracing providers,
including Event Tracing for Windows and Linux's systemtap and ktap.

But that doesn't help you if, like most Node developers, you're primarily
a JavaScript developer. The ideal solution is one that allows you to take
advantage of the hooks added to Node for DTrace from JavaScript. Work on this
is underway, and should be available in Node sometime around the point that it
finally hits 1.0.

In the meantime, the scaffolding for adding traceability to your applications
is available through third-party modules. The furthest along is jstrace, which
has all of the tools and modules necessary to start adding probes, or trace
points, to your own code. Another promising project, which may eventually be
incorporated into Node itself, is the very similarly-named jtrace. Both of
these can be seen as a useful generalization of the NODE_DEBUG process
described elsewhere, with the useful additional property that the program
listening for trace data is completely separated from the program emitting
trace events. The main downside is that it's still pretty labor-intensive
getting all the probes into your program in the first place.
